'''
• < 다이나믹 프로그래밍 vs 분할 정복 > 
  • 공통점 : 모두 최적 부분 구조를 가질 때 사용할 수 있음
    • 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황
  • 차이점 : 부분 문제의 중복
    • 다이나믹 프로그래밍 문제 : 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복
    • 분할 정복 문제 : 동일한 부분 문제가 반복적으로 계산되지 않음 (퀵 정렬, 병합 정렬 등)
    
• 다이나믹 프로그래밍 유형임을 파악하는 것이 중요 : 
  • 가장 먼저 : 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토
  • 그 다음 : 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나믹 프로그래밍을 고려
  
  • 일단 재귀함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑 다운)
  • 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있음
  • 일반적인 코딩 테스트 수준 : 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많음
  
  


'''
